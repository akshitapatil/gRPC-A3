# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_model_pb2 as data__model__pb2


class RedditServiceStub(object):
    """Service for Reddit API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/RedditService/CreatePost',
                request_serializer=data__model__pb2.Post.SerializeToString,
                response_deserializer=data__model__pb2.Post.FromString,
                )
        self.VotePost = channel.unary_unary(
                '/RedditService/VotePost',
                request_serializer=data__model__pb2.VoteRequest.SerializeToString,
                response_deserializer=data__model__pb2.Post.FromString,
                )
        self.GetPostContent = channel.unary_unary(
                '/RedditService/GetPostContent',
                request_serializer=data__model__pb2.Post.SerializeToString,
                response_deserializer=data__model__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/RedditService/CreateComment',
                request_serializer=data__model__pb2.Comment.SerializeToString,
                response_deserializer=data__model__pb2.Comment.FromString,
                )
        self.VoteComment = channel.unary_unary(
                '/RedditService/VoteComment',
                request_serializer=data__model__pb2.VoteRequest.SerializeToString,
                response_deserializer=data__model__pb2.Comment.FromString,
                )
        self.GetTopComments = channel.unary_stream(
                '/RedditService/GetTopComments',
                request_serializer=data__model__pb2.TopCommentsRequest.SerializeToString,
                response_deserializer=data__model__pb2.Comment.FromString,
                )
        self.ExpandCommentBranch = channel.unary_stream(
                '/RedditService/ExpandCommentBranch',
                request_serializer=data__model__pb2.Comment.SerializeToString,
                response_deserializer=data__model__pb2.Comment.FromString,
                )
        self.MonitorUpdates = channel.unary_stream(
                '/RedditService/MonitorUpdates',
                request_serializer=data__model__pb2.Post.SerializeToString,
                response_deserializer=data__model__pb2.Post.FromString,
                )


class RedditServiceServicer(object):
    """Service for Reddit API
    """

    def CreatePost(self, request, context):
        """Create a Post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotePost(self, request, context):
        """Upvote or downvote a Post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostContent(self, request, context):
        """Retrieve Post content
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Create a Comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteComment(self, request, context):
        """Upvote or downvote a Comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopComments(self, request, context):
        """Retrieve a list of N most upvoted comments under a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Expand a comment branch (tree of depth 2)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request, context):
        """Extra credit: Monitor updates - client initiates the call with a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=data__model__pb2.Post.FromString,
                    response_serializer=data__model__pb2.Post.SerializeToString,
            ),
            'VotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.VotePost,
                    request_deserializer=data__model__pb2.VoteRequest.FromString,
                    response_serializer=data__model__pb2.Post.SerializeToString,
            ),
            'GetPostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostContent,
                    request_deserializer=data__model__pb2.Post.FromString,
                    response_serializer=data__model__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=data__model__pb2.Comment.FromString,
                    response_serializer=data__model__pb2.Comment.SerializeToString,
            ),
            'VoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteComment,
                    request_deserializer=data__model__pb2.VoteRequest.FromString,
                    response_serializer=data__model__pb2.Comment.SerializeToString,
            ),
            'GetTopComments': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTopComments,
                    request_deserializer=data__model__pb2.TopCommentsRequest.FromString,
                    response_serializer=data__model__pb2.Comment.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_stream_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=data__model__pb2.Comment.FromString,
                    response_serializer=data__model__pb2.Comment.SerializeToString,
            ),
            'MonitorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=data__model__pb2.Post.FromString,
                    response_serializer=data__model__pb2.Post.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Service for Reddit API
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/CreatePost',
            data__model__pb2.Post.SerializeToString,
            data__model__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/VotePost',
            data__model__pb2.VoteRequest.SerializeToString,
            data__model__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/GetPostContent',
            data__model__pb2.Post.SerializeToString,
            data__model__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/CreateComment',
            data__model__pb2.Comment.SerializeToString,
            data__model__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/VoteComment',
            data__model__pb2.VoteRequest.SerializeToString,
            data__model__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RedditService/GetTopComments',
            data__model__pb2.TopCommentsRequest.SerializeToString,
            data__model__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RedditService/ExpandCommentBranch',
            data__model__pb2.Comment.SerializeToString,
            data__model__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RedditService/MonitorUpdates',
            data__model__pb2.Post.SerializeToString,
            data__model__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
